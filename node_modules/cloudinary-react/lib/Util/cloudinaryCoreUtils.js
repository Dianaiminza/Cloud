"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfiguredCloudinary = exports.makeElementResponsive = exports.getVideoTag = exports.getImageTag = exports.nonEmpty = void 0;

var _cloudinaryCore = require("cloudinary-core");

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Return object without null/undefined entries
 * @param {*} obj
 */
var nonEmpty = function nonEmpty(obj) {
  return Object.entries(obj).reduce(function (a, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        k = _ref2[0],
        v = _ref2[1];

    return v == null ? a : _objectSpread(_objectSpread({}, a), {}, _defineProperty({}, k, v));
  }, {});
};
/**
 * Generated a configured Cloudinary object.
 * @param extendedProps React props combined with custom Cloudinary configuration options
 * @return {Cloudinary} configured using extendedProps
 */


exports.nonEmpty = nonEmpty;

var getConfiguredCloudinary = function getConfiguredCloudinary(extendedProps) {
  var _nonEmpty = nonEmpty(extendedProps),
      public_id = _nonEmpty.public_id,
      ops = _objectWithoutProperties(_nonEmpty, ["public_id"]); // Remove null/undefined props


  var options = _cloudinaryCore.Util.withSnakeCaseKeys(ops);

  return _cloudinaryCore.Cloudinary["new"](options);
};

exports.getConfiguredCloudinary = getConfiguredCloudinary;

var getTag = function getTag(props, tagType) {
  var publicId = props.publicId,
      ops = _objectWithoutProperties(props, ["publicId"]); // Remove null/undefined props


  var cld = getConfiguredCloudinary(ops);
  return cld["".concat(tagType, "Tag")](publicId, _cloudinaryCore.Util.withSnakeCaseKeys(ops));
};
/**
 * Get a new <img> tag initialized with given props
 * @param {*} props
 */


var getImageTag = function getImageTag(props) {
  return getTag(props, "image");
};
/**
 * Get a new <video> tag initialized with given props
 * @param {*} props
 */


exports.getImageTag = getImageTag;

var getVideoTag = function getVideoTag(props) {
  return getTag(props, "video");
};
/**
 * Cloudinary underlying JS library will handle responsive behavior
 * @param {HTMLImageElement} img
 * @param {object} options
 * @Return callback that when called, will remove the listener created by Cloudinary.responsive
 */


exports.getVideoTag = getVideoTag;

var makeElementResponsive = function makeElementResponsive(img, options) {
  var snakeCaseOptions = _cloudinaryCore.Util.withSnakeCaseKeys(options);

  var cld = getConfiguredCloudinary(snakeCaseOptions); // Initialize cloudinary with new props

  cld.cloudinary_update(img, snakeCaseOptions);
  return cld.responsive(snakeCaseOptions, false);
};

exports.makeElementResponsive = makeElementResponsive;