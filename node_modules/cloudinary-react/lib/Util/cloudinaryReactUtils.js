"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractCloudinaryProps = exports.CLOUDINARY_REACT_PROPS = void 0;

var _cloudinaryCore = require("cloudinary-core");

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// props passed to cloudinary-core but should not be rendered as dom attributes
var CLOUDINARY_REACT_PROPS = ['accessibility', 'breakpoints', 'dataSrc', 'placeholder', 'publicId', 'signature']; // props passed to cloudinary-core for dom elements attributes generation
// Map Cloudinary props from array to object for efficient lookup

exports.CLOUDINARY_REACT_PROPS = CLOUDINARY_REACT_PROPS;
var CLOUDINARY_PROPS = [].concat(_toConsumableArray(_cloudinaryCore.Transformation.PARAM_NAMES), CLOUDINARY_REACT_PROPS).map(_cloudinaryCore.Util.camelCase).reduce(function (accumulator, cloudinaryPropName) {
  accumulator[cloudinaryPropName] = true;
  return accumulator;
}, {});
/**
 * Extracts cloudinaryProps and nonCloudinaryProps from given props
 *
 * @param props
 * @returns {{children: *, cloudinaryReactProps: {}, cloudinaryProps: {}, nonCloudinaryProps: {}}}
 */

var extractCloudinaryProps = function extractCloudinaryProps(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  var result = {
    children: children,
    cloudinaryProps: {},
    nonCloudinaryProps: {},
    cloudinaryReactProps: {}
  };
  Object.keys(props).forEach(function (key) {
    var camelKey = _cloudinaryCore.Util.camelCase(key);

    var value = props[key]; //if valid and defined add to cloudinaryProps

    if (CLOUDINARY_PROPS[camelKey]) {
      if (props[key] !== undefined && props[key] !== null) {
        result.cloudinaryProps[camelKey] = value;
      }
    } else if (camelKey === 'includeOwnBody') {
      //cloudinary-react specific prop
      result.cloudinaryReactProps[camelKey] = value;
    } else {
      //not valid so add to nonCloudinaryProps
      result.nonCloudinaryProps[key] = value;
    }
  });
  return result;
};

exports.extractCloudinaryProps = extractCloudinaryProps;