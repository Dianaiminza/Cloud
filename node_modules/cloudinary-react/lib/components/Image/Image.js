"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _CloudinaryComponent2 = _interopRequireDefault(require("../CloudinaryComponent"));

var _Util = require("../../Util");

var _cloudinaryCore = require("cloudinary-core");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RESPONSIVE_OVERRIDE_WARNING = ["Warning: passing a number value for width cancels the 'responsive' prop's effect on the image transformation.", "The 'responsive' prop affects the image transformation only when width === 'auto'.", "Passing 'width=\"auto\" responsive' will affect the actual image width that is fetched from Cloudinary.", "The 'responsive' prop causes the Image component to request an image which width is equal to the width of it's container.", "When passing 'width=\"auto\" responsive', you can set the <img> element width by passing a 'style' prop"].join('\n');
/**
 * A component representing a Cloudinary served image
 */

var Image = /*#__PURE__*/function (_CloudinaryComponent) {
  _inherits(Image, _CloudinaryComponent);

  var _super = _createSuper(Image);

  function Image(props, context) {
    var _this;

    _classCallCheck(this, Image);

    _this = _super.call(this, props, context);

    _defineProperty(_assertThisInitialized(_this), "isResponsive", function () {
      var _this$getExtendedProp = _this.getExtendedProps(),
          responsive = _this$getExtendedProp.responsive,
          width = _this$getExtendedProp.width;

      if (responsive && width !== 'auto') {
        console.warn(RESPONSIVE_OVERRIDE_WARNING);
      }

      return responsive && _this.element && _this.element.current;
    });

    _defineProperty(_assertThisInitialized(_this), "getOptions", function () {
      var extendedProps = _this.getExtendedProps();

      var _extendedProps$_this$ = _objectSpread(_objectSpread({}, extendedProps), _this.getTransformation(extendedProps)),
          children = _extendedProps$_this$.children,
          innerRef = _extendedProps$_this$.innerRef,
          options = _objectWithoutProperties(_extendedProps$_this$, ["children", "innerRef"]);

      if (!_this.shouldLazyLoad()) {
        delete options.loading;
      }

      return options;
    });

    _defineProperty(_assertThisInitialized(_this), "getAttributes", function () {
      var additionalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var placeholder = additionalOptions.placeholder;
      var options = (0, _Util.extractCloudinaryProps)(_objectSpread(_objectSpread({}, _this.getOptions()), additionalOptions));
      var cloudinaryProps = options.cloudinaryProps,
          nonCloudinaryProps = options.nonCloudinaryProps,
          cloudinaryReactProps = options.cloudinaryReactProps;
      var imageTag = (0, _Util.getImageTag)(_objectSpread(_objectSpread({}, cloudinaryProps), cloudinaryReactProps));

      var cloudinaryAttributes = _cloudinaryCore.Util.withCamelCaseKeys(imageTag.attributes()); // React requires camelCase instead of snake_case attributes


      var attributes = _objectSpread(_objectSpread({}, cloudinaryAttributes), nonCloudinaryProps); // We want to keep 'data-src' if it exists


      if (attributes.dataSrc) {
        attributes['data-src'] = attributes.dataSrc;
      } // Set placeholder Id


      if (placeholder && attributes.id) {
        attributes.id = attributes.id + '-cld-placeholder';
      } // Set data-src if lazy loading and not in view


      if (_this.shouldLazyLoad()) {
        attributes['data-src'] = attributes.dataSrc || attributes.src;
        delete attributes.src;
      } // Remove unneeded attributes,


      _Util.CLOUDINARY_REACT_PROPS.forEach(function (attr) {
        delete attributes[attr];
      });

      return attributes;
    });

    _defineProperty(_assertThisInitialized(_this), "update", function () {
      // Handle lazy loading
      if (_this.shouldLazyLoad()) {
        // Will set this.state.isInView = true when in view
        _cloudinaryCore.Util.detectIntersection(_this.element.current, _this.onIntersect);
      } else {
        // Handle responsive only if lazy loading wasn't requested or already handled
        if (_this.isResponsive()) {
          var options = _this.getOptions();

          var placeholder = _this.getPlaceholderType(); // Make placeholder responsive


          if (placeholder) {
            var removePlaceholderListener = (0, _Util.makeElementResponsive)(_this.placeholderElement.current, _objectSpread(_objectSpread({}, options), {}, {
              placeholder: placeholder
            }));

            _this.listenerRemovers.push(removePlaceholderListener);
          } // Make original image responsive


          var removeImgListener = (0, _Util.makeElementResponsive)(_this.element.current, options);

          _this.listenerRemovers.push(removeImgListener);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "shouldLazyLoad", function () {
      var _this$getExtendedProp2 = _this.getExtendedProps(),
          loading = _this$getExtendedProp2.loading;

      var isInView = _this.state.isInView;
      return !isInView && (loading === "lazy" || loading === "auto");
    });

    _defineProperty(_assertThisInitialized(_this), "handleImageLoaded", function () {
      var onLoad = _this.props.onLoad;

      _this.setState({
        isLoaded: true
      }, function () {
        if (onLoad) {
          onLoad();
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderPlaceholder", function (placeholder, attributes) {
      attributes.style = _objectSpread(_objectSpread({}, attributes.style || {}), {}, {
        opacity: 0,
        position: 'absolute'
      });
      attributes.onLoad = _this.handleImageLoaded;
      var placeholderWrapperStyle = {
        display: 'inline'
      };

      var placeholderAttributes = _this.getAttributes({
        placeholder: placeholder
      });

      return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, _this.renderImage(attributes), /*#__PURE__*/_react["default"].createElement("div", {
        style: placeholderWrapperStyle
      }, /*#__PURE__*/_react["default"].createElement("img", _extends({
        ref: _this.placeholderElement
      }, placeholderAttributes))));
    });

    _defineProperty(_assertThisInitialized(_this), "renderImage", function (attributes) {
      return /*#__PURE__*/_react["default"].createElement("img", _extends({
        ref: _this.attachRef
      }, attributes));
    });

    _defineProperty(_assertThisInitialized(_this), "getPlaceholderType", function () {
      var _this$getExtendedProp3 = _this.getExtendedProps(),
          children = _this$getExtendedProp3.children;

      var placeholder = _this.getChildPlaceholder(children);

      return placeholder ? placeholder.props.type : null;
    });

    _this.placeholderElement = /*#__PURE__*/(0, _react.createRef)();
    _this.state = {
      isLoaded: false
    };
    _this.listenerRemovers = [];
    return _this;
  }
  /**
   * @return true when this image element should be made responsive, false otherwise.
   */


  _createClass(Image, [{
    key: "componentDidMount",

    /**
     * Invoked immediately after a component is mounted (inserted into the tree)
     */
    value: function componentDidMount() {
      this.update();
    }
    /**
     * Invoked immediately after updating occurs. This method is not called for the initial render.
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.update();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.listenerRemovers.forEach(function (removeListener) {
        removeListener();
      });
    }
    /**
     * Updates this Image's isLoaded state,
     * And fires props.onLoad if exists.
     */

  }, {
    key: "render",
    value: function render() {
      var isLoaded = this.state.isLoaded;
      var attributes = this.getAttributes();
      var placeholder = this.getPlaceholderType(); //If image wasn't loaded and there's a child placeholder then we render it.

      if (!isLoaded && placeholder) {
        return this.renderPlaceholder(placeholder, attributes);
      }

      return this.renderImage(attributes);
    }
  }]);

  return Image;
}(_CloudinaryComponent2["default"]);

Image.defaultProps = {};
Image.propTypes = _CloudinaryComponent2["default"].propTypes;
Image.propTypes.responsive = _propTypes["default"].bool;
Image.propTypes.loading = _propTypes["default"].string;
Image.propTypes.accessibility = _propTypes["default"].string;
var _default = Image;
exports["default"] = _default;